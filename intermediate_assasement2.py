# -*- coding: utf-8 -*-
"""Intermediate assasement2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16YwbbcfUhQE2O4DQRO13abPcQxl-7iIg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

train=pd.read_csv(r'/content/train_LZdllcl.csv')
test=pd.read_csv(r'/content/test_2umaH9m.csv')

train.head()

test.head()

train.shape

train.isna().sum()

train.info()

train.describe()

train.columns

train.drop(["employee_id"],axis=1,inplace=True)

train['education']=train['education'].fillna(train['education'].mode()[0])

train['previous_year_rating']=train['previous_year_rating'].fillna(train['previous_year_rating'].mode()[0])

train.isna().sum()

num_col=train.select_dtypes(include=['int64','float64']).columns
num_col

fig, ax = plt.subplots(2,4, figsize=(16,8))
ax=ax.flatten()
for i,col in enumerate(num_col):
  sns.histplot(train[col],ax=ax[i],kde=True)
plt.tight_layout()
plt.show()

cat_col=train.select_dtypes(include=['object']).columns
cat_col

for col in cat_col:
  plt.figure(figsize=(5,4))
  sns.countplot(x=train[col])
  plt.title(col)
  plt.xticks(rotation=90)
  plt.show()

sns.scatterplot(x='age',y='length_of_service',hue='is_promoted',data=train,palette='deep')
plt.show()

sns.scatterplot(x='education',y='avg_training_score',hue='is_promoted',data=train,palette='deep')
plt.show()

corr_matrix=train[num_col].corr()
corr_matrix
sns.heatmap(corr_matrix,annot=True,fmt='.2f',cmap='coolwarm')
plt.show()

train.drop(["region"],axis=1,inplace=True)

train.drop(["recruitment_channel"],axis=1,inplace=True)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
train['education']=le.fit_transform(train['education'])
train['gender']=le.fit_transform(train['gender'])

train=pd.get_dummies(train,columns=['department'],dtype=int)

train.head()

train.columns

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()



cols_to_scale = ['education', 'gender', 'no_of_trainings', 'age', 'previous_year_rating',
                'length_of_service', 'KPIs_met >80%', 'awards_won?',
                'avg_training_score', 'department_Analytics',
                'department_Finance', 'department_HR', 'department_Legal',
                'department_Operations', 'department_Procurement', 'department_R&D',
                'department_Sales & Marketing', 'department_Technology']

train[cols_to_scale] = sc.fit_transform(train[cols_to_scale])

train.head()

x=train.drop(['is_promoted'],axis=1)
y=train['is_promoted']

x.head()

y.head()

test.shape

test.isna().sum()

test.info()

test.describe()

test['education']=test['education'].fillna(test['education'].mode()[0])

numerical_col=test.select_dtypes(include=['int64','float64']).columns
numerical_col

fig, ax = plt.subplots(2,4, figsize=(16,8))
ax=ax.flatten()
for i,ncol in enumerate(numerical_col):
  sns.histplot(test[ncol],ax=ax[i],kde=True)
plt.tight_layout()
plt.show()



test['previous_year_rating']=test['previous_year_rating'].fillna(test['previous_year_rating'].median())

test.isna().sum()

categorical_col=test.select_dtypes(include=['object']).columns
categorical_col

for ocol in categorical_col:
  plt.figure(figsize=(5,4))
  sns.countplot(x=test[ocol])
  plt.title(ocol)
  plt.xticks(rotation=90)
  plt.show()

test.columns

test=test.drop(['employee_id','region','recruitment_channel'],axis=1)

test.columns

sns.scatterplot(x='age',y='length_of_service',data=test,palette='deep')
plt.show()

sns.scatterplot(x='education',y='avg_training_score',data=test,palette='deep')
plt.show()

numerical_col=test.select_dtypes(include=['int64','float64']).columns
numerical_col

corre_matrix=test[numerical_col].corr()
corre_matrix
sns.heatmap(corre_matrix,annot=True,fmt='.2f',cmap='coolwarm')
plt.show()

test.head()

test.columns

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
test['education']=le.fit_transform(test['education'])
test['gender']=le.fit_transform(test['gender'])

test=pd.get_dummies(test,columns=['department'],dtype=int)

test.head()

columns=test.columns

columns

test.head()

col_to_scale = ['education', 'gender', 'no_of_trainings', 'age', 'previous_year_rating',
                'length_of_service', 'KPIs_met >80%', 'awards_won?',
                'avg_training_score', 'department_Analytics',
                'department_Finance', 'department_HR', 'department_Legal',
                'department_Operations', 'department_Procurement', 'department_R&D',
                'department_Sales & Marketing', 'department_Technology']

test[col_to_scale] = sc.fit_transform(test[col_to_scale])

test.columns

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
test=sc.fit_transform(test)

test=pd.DataFrame(test,columns=columns)

test.head()

x_train=train.drop(['is_promoted'],axis=1)
y_train=train['is_promoted']

x_test=test.copy()

from sklearn.linear_model import LogisticRegression
logit_model=LogisticRegression()
logit_model.fit(x_train,y_train)
y_pred=logit_model.predict(x_test)

y_pred

y_train_pred=logit_model.predict(x_train)

from sklearn.metrics import f1_score
f1=f1_score(y_train,y_train_pred)
print(f1)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

svm_model = SVC(kernel="linear")
svm_model.fit(x_train, y_train)
s_pred = svm_model.predict(x_test)

# Predict on the training data to get predictions for the same samples as y_train
s_pred_train = svm_model.predict(x_train)

# Calculate accuracy using the training data predictions and labels
acc = accuracy_score(y_train, s_pred_train)
print(acc)

f1 = f1_score(y_train, s_pred_train)
print(f1)

from sklearn.tree import DecisionTreeClassifier
dt_model=DecisionTreeClassifier(random_state=42)
dt_model.fit(x_train,y_train)
d_pred=dt_model.predict(x_test)
d_pred_train = dt_model.predict(x_train)

f1=f1_score(y_train,d_pred_train)
f1

d_pred

sample=pd.read_csv(r"/content/sample_submission_M0L0uXE.csv")

sample["is_promoted"]=d_pred

sample.head()

sample.to_csv('sample.csv', index=False)  # Save without index

!ls

sample.to_csv(r'/content/sample.csv', index=False)

from google.colab import files
files.download('sample.csv')

from sklearn.ensemble import RandomForestClassifier
rf_model=RandomForestClassifier()
rf_model.fit(x_train,y_train)
r_pred=rf_model.predict(x_test)
r_pred_train = rf_model.predict(x_train)

f1=f1_score(y_train,r_pred_train)
f1

r_pred

sample_df=pd.read_csv(r"/content/sample_submission_M0L0uXE.csv")

sample_df["is_promoted"]=r_pred

sample_df.head()

sample_df.to_csv('sample_df.csv', index=False)  # Save without index

from google.colab import files
files.download('sample_df.csv')

